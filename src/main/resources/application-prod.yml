# Configuración de producción para Caribe Vibes
# Entorno: PRODUCTION
# Base de datos: MySQL/PostgreSQL remota
# Logging: INFO/WARN para producción
# Security: Configuración reforzada

spring:
  application:
    name: caribe-vibes-prod
  
  # Base de datos de producción
  datasource:
    # Configuración MySQL (descomentar para usar)
    # url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:caribe_dreams}?useSSL=true&serverTimezone=UTC&allowPublicKeyRetrieval=true
    # driver-class-name: com.mysql.cj.jdbc.Driver
    
    # Configuración PostgreSQL (descomentar para usar)
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:caribe_dreams}?sslmode=require
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:caribe_user}
    password: ${DB_PASSWORD:caribe_password}
    
    # Pool de conexiones optimizado para producción
    hikari:
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      maximum-pool-size: 20
      minimum-idle: 5
      leak-detection-threshold: 60000
      
  # JPA/Hibernate para producción
  jpa:
    hibernate:
      ddl-auto: validate # Solo validar, no crear tablas
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        generate_statistics: false
        
  # Flyway para migraciones en producción
  flyway:
    enabled: true
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true # Deshabilitar limpieza en producción
    locations: classpath:db/migration
    
  # Cache configurado para producción
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterAccess=300s
    cache-names:
      - users
      - hotels
      - destinations
      - activities

server:
  port: ${PORT:8080}
  address: 0.0.0.0
  compression:
    enabled: true
    mime-types: 
      - application/json
      - application/xml
      - text/html
      - text/xml
      - text/plain
      - text/css
      - application/javascript
    min-response-size: 1024
  http2:
    enabled: true
  servlet:
    session:
      timeout: 30m
      cookie:
        secure: true
        http-only: true
        same-site: strict

logging:
  level:
    'org.project.caribevibes': INFO
    'org.springframework.security': WARN
    'org.springframework.web': WARN
    'org.hibernate': WARN
    'com.zaxxer.hikari': WARN
    'org.flywaydb': INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/caribe-dreams/application.log
    max-size: 100MB
    max-history: 30
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
    access:
      default: UNRESTRICTED
  endpoint:
    health:
      access: UNRESTRICTED
      show-details: when-authorized
      show-components: when-authorized
      group:
        custom:
          include: database,externalServices
          show-details: always
    info:
      access: UNRESTRICTED
    metrics:
      access: UNRESTRICTED
    prometheus:
      access: UNRESTRICTED
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    distribution:
      'percentiles-histogram.http.server.requests': true
      'percentiles.http.server.requests': 0.5,0.9,0.95,0.99
        
info:
  application:
    name: Caribe Vibes API
    description: Sistema de gestión turística para el Caribe
    version: 1.0.0
    environment: production
  build:
    artifact: caribe-vibes
    group: org.project
    
app:
  security:
    rate-limit:
      enabled: true
      requests-per-minute: 100
    session:
      max-concurrent-sessions: 3
      prevent-session-fixation: true
    jwt:
      secret: ${JWT_SECRET:your-super-secure-jwt-secret-key-for-production-environment-caribe-dreams-2024}
      expiration: ${JWT_EXPIRATION:86400000}
  file:
    upload:
      max-size: 10MB
      allowed-types: 
        - image/jpeg
        - image/png
        - image/webp
        - application/pdf
    storage:
      type: ${STORAGE_TYPE:local}
      path: ${STORAGE_PATH:/var/caribe-dreams/uploads}
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:noreply@caribevibes.com}
    password: ${MAIL_PASSWORD:your-email-password}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  redis:
    enabled: ${REDIS_ENABLED:false}
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
  external:
    payment:
      stripe:
        'public-key': ${STRIPE_PUBLIC_KEY:}
        'secret-key': ${STRIPE_SECRET_KEY:}
      paypal:
        'client-id': ${PAYPAL_CLIENT_ID:}
        'client-secret': ${PAYPAL_CLIENT_SECRET:}
    maps:
      google:
        'api-key': ${GOOGLE_MAPS_API_KEY:}
  cors: # Moved CORS from spring.webflux to app.cors as spring.webflux.cors is not a standard Spring Boot property 
    allowed-origins:
      - "${FRONTEND_URL:https://www.caribevibes.com}"
      - "${ADMIN_URL:https://admin.caribevibes.com}"
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
      - OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# Custom health indicators (example, these would need to be implemented)
# health: # This top-level key was incorrect for Spring Boot Actuator health groups
  # database:
    # enabled: true
    # timeout: 5s
  # external-services:
    # enabled: true

# Removed original spring.compression, jwt, cors, and health blocks as they were moved or corrected.
# Quoted keys that contained special characters like '.' or '-' where appropriate.
# Changed deprecated management endpoint 'enabled' properties to 'access' and used valid enum values.
# Corrected the prometheus export enabled property.
# Standardized app info under info.application.
